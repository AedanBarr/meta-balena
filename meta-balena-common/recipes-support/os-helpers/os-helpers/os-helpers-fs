#!/bin/sh

# Copyright 2019 Balena Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Wait for a file to appear with loop count limit.
# Use-case example: wait for udev to create a filesystem symlink.
# Arguments:
#   1 - target path
#   2 - number of loops (each loop sleeps for 100ms)
wait4file() {
	_lpath="$1"
	_lloops="$2"

	while [ ! -e "$_lpath" ]; do
		if [ "$_lloops" -gt 0 ]; then
			sleep 0.1
			_lloops=$((_lloops-1))
		else
			return 1
		fi
	done
	return 0
}

# Returns the UUID set in cmdline for root
# Returns:
#   0 - root UUID found in cmdline (prints the matching uuid to stdout)
#   1 - root uuid is not present in cmdline
get_cmdline_root_uuid() {
	CMDLINE=${HELPER_CMDLINE:-/proc/cmdline}
	# shellcheck disable=SC2013
	for p in $(cat "$CMDLINE"); do
		opt="$(echo "$p" | cut -d'=' -f1)"
		if [ "$opt" = "root" ]; then
			opt="$(echo "$p" | cut -d'=' -f2)"
			if [ "$opt" = "UUID" ]; then
				echo "$p" | cut -d'=' -f3
				return 0
			fi
		fi
	done
	return 1
}

# Returns the udev symlink path for a label.
# Argument:
#  1 - label
# Returns:
#  by-state symlink udev path
get_state_path_from_label() {
	[ -z "$1" ] && return 1
	echo "/dev/disk/by-state/${1}"
}

# Output the UUID for the specified block device.
# Arguments:
#   1 - Target block device
get_dev_uuid() {
	lsblk -nlo uuid "${1}"
}

# Output the filesystem type for the specified block device.
# Arguments:
#   1 - Target block device
get_dev_fstype() {
	lsblk -nlo fstype "${1}"
}

# Output the label for the specified block device
# Arguments
#  1 - Target block device
get_dev_label() {
	lsblk -nlo label "${1}"
}
