#!/bin/bash
set -e
set -o pipefail

source /usr/sbin/resin-vars
export CONFIG_PATH

mkdir -p /mnt/data-disk

# check if we booted from eMMC or external media; we use the config.json depending on where we have booted from

if [ -f /etc/resin-init-flasher.conf ]; then
	# we have booted from external media and we need to flash on eMMC
	mcopy -ni /dev/disk/by-label/flash-conf ::config.json $CONFIG_PATH
else
	mount /dev/disk/by-label/resin-data /mnt/data-disk
	# check if this is the first boot - verify if the file remove_to_reset_data exists
	if ! mcopy -i /dev/disk/by-label/resin-boot ::remove_to_reset_data /tmp/remove_to_reset_data &> /dev/null; then
		mcopy -ni /dev/disk/by-label/resin-conf ::config.json $CONFIG_PATH
	fi
fi

if cat "$CONFIG_PATH" | jq -e -r '.files["network/settings"]'; then
	rm -rf /var/lib/connman/*
	mkdir -p /var/lib/connman

	cat $CONFIG_PATH | jq -r '.files["network/settings"] // ""' > /var/lib/connman/settings
	if cat "$CONFIG_PATH" | jq -e -r '.files["network/ethernet.config"]'; then
		cat $CONFIG_PATH | jq -r '.files["network/ethernet.config"] // ""' > /var/lib/connman/ethernet.config
	fi

	if cat "$CONFIG_PATH" | jq -e -r '.files["network/network.config"]'; then
		cat $CONFIG_PATH | jq -r '.files["network/network.config"] // ""' > /var/lib/connman/network.config
	fi
fi

if [ ! -f /etc/resin-init-flasher.conf ]; then
	# we do a lazy umount to avoid "device is busy" issue
	umount -l /dev/disk/by-label/resin-data
fi
