#!/bin/bash
set -e

# set API_ENDPOINT and CONFIG_PATH
# file generated by supervisor-init(-dev) recipe
source /etc/resin.conf
export API_ENDPOINT CONFIG_PATH

mkdir -p /tmp/.rce
mount -o bind /tmp/.rce /.rce

mount -o ro /dev/disk/by-label/resin-boot /boot

if [ ! -e /boot/remove_to_reset_data ]; then
	# Expand Docker Container to the end of the SD card
    # Some might argue that this is a hack :)
    datapart=`readlink -f /dev/disk/by-label/resin-data`
    datadev=`lsblk $datapart -n -o PKNAME`
    parted -s /dev/$datadev -- resizepart 4 -1s
    parted -s /dev/$datadev -- resizepart 6 -1s

	partprobe
	mount /dev/disk/by-label/resin-data /mnt/data-disk
	btrfs filesystem resize max /mnt/data-disk

	# If there is no uuid already we need to register the device
	if [ `jq ".uuid | length" $CONFIG_PATH` -eq 0 ]; then
		resin-device-register &
	fi
	
	# Load containers

	resin-device-progress 60 "Preparing rce" || true
	mount -o remount,rw /boot
	touch /boot/remove_to_reset_data && sync
else
	# Mount rce images directory
	mount /dev/disk/by-label/resin-data /mnt/data-disk
fi

# Start logging to disk when DEBUG flag is present in the recovery [Initial installation] partition.
if [ -e /boot/debug.txt ]; then
	mount -o remount,rw /boot
	mkdir -p /boot/log
	cp -r /var/log/* /boot/log
	ln -sf /boot/log /var
fi

# Mount rce and data directories to standard locations.
mkdir -p /resin-data
mkdir -p /var/lib/rce
mkdir -p /mnt/data-disk/resin-data
sync
mount -o bind /mnt/data-disk/resin-data /resin-data
mount -o bind /mnt/data-disk/rce /var/lib/rce

# Run the board specific init script
/sbin/resin-init-board

resin-device-progress 80 "Starting supervisor" || true

exit 0
