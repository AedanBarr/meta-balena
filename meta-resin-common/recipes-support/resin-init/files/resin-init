#!/bin/sh
set -e

# set API_ENDPOINT and CONFIG_PATH
# file generated by supervisor-init(-dev) recipe
source /etc/resin.conf
export API_ENDPOINT CONFIG_PATH

mkdir -p /tmp/.rce
mount -o bind /tmp/.rce /.rce

mount -o ro /dev/mmcblk0p1 /boot
if [ ! -e /boot/remove_to_reset_data ]; then
	mount -o remount,rw /boot

	# Copy the config.json to a standard location in all our images.
	strings -n 1 /dev/mmcblk0p5 > /tmp/config.json

	# Setup the network from the config.json
	/etc/init.d/connman stop
	CONFIG_PATH=/tmp/config.json resin-net-config
	/etc/init.d/connman start

	# Expand Docker Container to the end of the SD card
	parted -s /dev/mmcblk0 -- resizepart 4 -1s
	parted -s /dev/mmcblk0 -- resizepart 6 -1s
	
	partprobe

	# Create a directory for our images.
	mkdir -p /mnt/data-disk
	mount /dev/mmcblk0p6 /mnt/data-disk

	btrfs filesystem resize max /mnt/data-disk

	cp /tmp/config.json /mnt/data-disk/config.json

	uuid=$(openssl rand -hex 31)
	config_json=`cat $CONFIG_PATH`
	echo $config_json | jq ".uuid=\"$uuid\"" > $CONFIG_PATH
	
	resin-device-register &
	
	# Load containers
	
	resin-device-progress 60 "Preparing rce" || true

	touch /boot/remove_to_reset_data && sync
else
	# Mount rce images directory
	mount /dev/mmcblk0p6 /mnt/data-disk
fi

# Start logging to disk when DEBUG flag is present in the recovery [Initial installation] partition.
if [ -e /boot/debug.txt ]; then
	mount -o remount,rw /boot
	mkdir -p /boot/log
	cp -r /var/log/* /boot/log
	ln -sf /boot/log /var
fi

# Mount rce and data directories to standard locations.
mkdir -p /resin-data
mkdir -p /var/lib/rce
mkdir -p /mnt/data-disk/resin-data
sync
mount -o bind /mnt/data-disk/resin-data /resin-data
mount -o bind /mnt/data-disk/rce /var/lib/rce

# Run the board specific init script
/etc/init.d/resin-init-board

resin-device-progress 80 "Starting supervisor" || true

exit 0
