#!/bin/bash
set -o pipefail

source /etc/resin.conf

if [ -z "$API_ENDPOINT" -o -z "$CONFIG_PATH" ]; then
	echo "Environment variables API_ENDPOINT and CONFIG_PATH must be set."
	exit 1
fi

read API_KEY DEVICE_ID <<<$(jq -r '.apiKey,.deviceId' $CONFIG_PATH)
if [ -z "$API_KEY" -o -z "$DEVICE_ID" ]; then
	echo "JSON in config file $CONFIG_PATH must have apiKey and deviceId attributes."
	exit 1
fi

function error_handler {
	# If rce pull fails, start the old supervisor again and exit
	rce start resin_supervisor
	exit 1
}

trap 'error_handler $LINENO' ERR

# Get target supervisor tag from API.
# The script will exit if curl does not get a valid response.
read tag image_name <<<$(curl -s --compressed "$API_ENDPOINT/ewa/supervisor_release?\$filter=device/id%20eq%20$DEVICE_ID&apikey=$API_KEY" | jq -e -r '.d[0].supervisor_version,.d[0].image_name')

# Check that we didn't somehow get an empty tag version.
if [ -z "$tag" ]; then
	error_handler $LINENO "no tag"
fi

# Get image id of tag. This will be non-empty only in case it's already downloaded.
imageid=$(rce inspect -f '{{.Id}}' "$image_name:$tag") || imageid=""

# Check if image is downloaded and there is a running container.
# The second condition is needed to make sure the image has not stopped since we first run it.
if [[ -n "$imageid" && $(rce ps -q --no-trunc | xargs rce inspect -f '{{.Image}}' | grep "$imageid") ]]; then
	echo "Latest supervisor version already running."
	exit 0
fi

# Try to stop old supervisor to prevent from deleting the intermediate images while downloading the new one
rce stop resin_supervisor || true

# Pull target version.
rce pull "$image_name:$tag"

# Try removing old supervisor. Do not exit if these fail.
rce rm resin_supervisor || true

# Run supervisor with the device-type-specific options.
# We give a specific name to the container to guarantee only one running.
rce-run-supervisor "$image_name:$tag"

# Mark supervisor as working. This version will run when the device reboots.
rce tag -f "$image_name:$tag" "$image_name:latest"
